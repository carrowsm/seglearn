
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_scoring.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_scoring.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_scoring.py:


==============================
Scoring Time Series Estimators
==============================

This examples demonstrates some of the caveats / issues when trying to
calculate performance scores for time series estimators.

This pipeline has been designed to evaluate performance using
segments (not series') as instances of the data.

.. GENERATED FROM PYTHON SOURCE LINES 13-33

.. code-block:: default

    # Author: David Burns
    # License: BSD


    import itertools

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import f1_score, confusion_matrix, make_scorer
    from sklearn.model_selection import train_test_split, cross_validate
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler

    from seglearn.datasets import load_watch
    from seglearn.pipe import Pype
    from seglearn.transform import FeatureRep, Segment









.. GENERATED FROM PYTHON SOURCE LINES 34-36

CONFUSION PLOT
#############################################

.. GENERATED FROM PYTHON SOURCE LINES 36-60

.. code-block:: default


    def plot_confusion_matrix(cm, classes,
                              normalize=True,
                              cmap=plt.cm.Blues):
        """ plots confusion matrix """
        if normalize:
            cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        plt.imshow(cm, interpolation='nearest', cmap=cmap)
        plt.colorbar()
        tick_marks = np.arange(len(classes))
        plt.xticks(tick_marks, classes, rotation=45)
        plt.yticks(tick_marks, classes)
        fmt = '.2f' if normalize else 'd'
        thresh = cm.max() / 2.
        for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
            plt.text(j, i, format(cm[i, j], fmt),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")

        plt.ylabel('True label')
        plt.xlabel('Predicted label')
        plt.tight_layout()









.. GENERATED FROM PYTHON SOURCE LINES 61-63

SETUP
#############################################

.. GENERATED FROM PYTHON SOURCE LINES 63-80

.. code-block:: default


    # load the data
    data = load_watch()
    X = data['X']
    y = data['y']

    # create a feature representation pipeline
    steps = [('seg', Segment()),
             ('features', FeatureRep()),
             ('scaler', StandardScaler()),
             ('rf', RandomForestClassifier(n_estimators=20))]

    pipe = Pype(steps)

    # split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "




.. GENERATED FROM PYTHON SOURCE LINES 81-83

OPTION 1: Use the score SegPipe score method
#############################################

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default


    pipe.fit(X_train, y_train)
    score = pipe.score(X_test, y_test)
    print("Accuracy score: ", score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    Accuracy score:  0.7875647668393783




.. GENERATED FROM PYTHON SOURCE LINES 89-91

OPTION 2: generate true and predicted target values for the segments
#####################################################################

.. GENERATED FROM PYTHON SOURCE LINES 91-100

.. code-block:: default


    y_true, y_pred = pipe.transform_predict(X_test, y_test)
    # use any of the sklearn scorers
    f1_macro = f1_score(y_true, y_pred, average='macro')
    print("F1 score: ", f1_macro)

    cm = confusion_matrix(y_true, y_pred)
    plot_confusion_matrix(cm, data['y_labels'])




.. image:: /auto_examples/images/sphx_glr_plot_scoring_001.png
    :alt: plot scoring
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    F1 score:  0.798260921806575




.. GENERATED FROM PYTHON SOURCE LINES 101-103

OPTION 3: scoring during model selection
#########################################

.. GENERATED FROM PYTHON SOURCE LINES 103-121

.. code-block:: default


    # model selection using the built-in score method for the final estimator
    cv_scores = cross_validate(pipe, X, y, cv=4, return_train_score=True)
    print("CV Scores: ", pd.DataFrame(cv_scores))

    # model selection with scoring functions / dictionaries
    #
    # unfortunately, this is not possible withing the current framework due to how
    # scoring is implemented within the model_selection functions / classes of sklearn
    # running the code below will cause an error, because the model_selection
    # functions / classes do not have access to y_true for the segments
    #
    # >>> scoring = ['accuracy','precision_macro','recall_macro','f1_macro']
    # >>> cv_scores = cross_validate(pipe, X, y, cv = 4, return_train_score=True, scoring=scoring)
    #
    # workarounds for this issue are outlined below






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    CV Scores:     fit_time  ...  train_score
    0  0.490943  ...          1.0
    1  0.530598  ...          1.0
    2  0.513644  ...          1.0
    3  0.491369  ...          1.0

    [4 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 122-124

SCORING WORKAROUND 1: USE ANOTHER SCORER FUNCTION
##################################################

.. GENERATED FROM PYTHON SOURCE LINES 124-133

.. code-block:: default


    # ``SegPipe`` can be initialized with a scorer callable made with sklearn.metrics.make_scorer
    # this can be used to cross_validate or grid search with any 1 score

    scorer = make_scorer(f1_score, average='macro')
    pipe = Pype(steps, scorer=scorer)
    cv_scores = cross_validate(pipe, X, y, cv=4, return_train_score=True)
    print("CV F1 Scores: ", pd.DataFrame(cv_scores))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass memory=None as keyword args. From version 0.25 passing these as positional arguments will result in an error
      warnings.warn("Pass {} as keyword args. From version 0.25 "
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    CV F1 Scores:     fit_time  ...  train_score
    0  0.492376  ...          1.0
    1  0.521578  ...          1.0
    2  0.518972  ...          1.0
    3  0.516250  ...          1.0

    [4 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 134-136

SCORING WORKAROUND 2: WORK OUTSIDE THE PIPELINE
#################################################

.. GENERATED FROM PYTHON SOURCE LINES 136-155

.. code-block:: default


    # If you want to have multiple score computed, the only way is as follows
    #
    # First transform the time series data into segments and then use an sklearn Pipeline
    #
    # The disadvantage of this is that the parameters of the segmentation cannot be
    # optimized with this approach

    segmenter = Segment()
    X_seg, y_seg, _ = segmenter.fit_transform(X, y)

    clf = Pipeline([('features', FeatureRep()),
                    ('scaler', StandardScaler()),
                    ('rf', RandomForestClassifier())])

    scoring = ['accuracy', 'precision_macro', 'recall_macro', 'f1_macro']
    cv_scores = cross_validate(clf, X_seg, y_seg,
                               cv=4, return_train_score=False, scoring=scoring)
    print("CV Scores (workaround): ", pd.DataFrame(cv_scores))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda/envs/testenv/lib/python3.8/site-packages/seglearn/transform.py:237: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
      Xt = np.array([sliding_tensor(Xt[i], self.width, self._step, self.order)
    CV Scores (workaround):     fit_time  ...  test_f1_macro
    0  1.551326  ...       0.817762
    1  1.572378  ...       0.828056
    2  1.535842  ...       0.828378
    3  1.498286  ...       0.813035

    [4 rows x 6 columns]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.340 seconds)


.. _sphx_glr_download_auto_examples_plot_scoring.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_scoring.py <plot_scoring.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_scoring.ipynb <plot_scoring.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
